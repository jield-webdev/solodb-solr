<?xml version="1.0" encoding="UTF-8" ?>

<schema name="equipment_module_ecn" version="1.5">


    <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
      or Solr won't start. _version_ and update log are required for SolrCloud
   -->
    <field name="_version_" type="long" indexed="true" stored="true"/>

    <!-- points to the root document of a block of nested documents. Required for nested
      document support, may be removed otherwise
   -->
    <field name="_root_" type="string" indexed="true" stored="false"/>

    <!-- Only remove the "id" field if you have a very good reason to. While not strictly
     required, it is highly recommended. A <uniqueKey> is present in almost all Solr
     installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id".
   -->
    <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false"/>

    <field name="description" type="text_general" indexed="true" stored="true" omitNorms="true"/>
    <field name="description_search" type="text_general_edge_ngram" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="description" dest="description_search"/>

    <field name="ecn" type="text_general" indexed="true" stored="true" omitNorms="true"/>
    <field name="ecn_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="ecn" dest="ecn_search"/>

    <field name="is_active" type="boolean" indexed="true" stored="true" omitNorms="true"/>
    <field name="is_active_text" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="is_closed" type="boolean" indexed="true" stored="true" omitNorms="true"/>
    <field name="is_closed_text" type="string" indexed="true" stored="true" omitNorms="true"/>

    <field name="owner_id" type="int" indexed="true" stored="true" omitNorms="true"/>
    <field name="owner" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="owner_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="owner_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="owner" dest="owner_search"/>

    <field name="updated_by_id" type="int" indexed="true" stored="true" omitNorms="true"/>
    <field name="updated_by" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="updated_by_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="updated_by_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="updated_by" dest="updated_by_search"/>

    <field name="forecast_up" type="date" indexed="true" stored="true" omitNorms="true"/>

    <field name="module_id" type="int" indexed="true" stored="true" omitNorms="true"/>
    <field name="module_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="module_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="module_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="module_name" dest="module_name_sort"/>
    <copyField source="module_name" dest="module_name_search"/>

    <field name="module_mes_name" type="text_general" indexed="true" stored="true" omitNorms="true"/>
    <field name="module_mes_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="module_mes_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="module_name" dest="module_mes_name_sort"/>
    <copyField source="module_name" dest="module_mes_name_search"/>

    <field name="module_default_name" type="text_general" indexed="true" stored="true" omitNorms="true"/>
    <field name="module_default_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="module_default_name_search" type="string_ci" indexed="true" stored="true"
           omitNorms="true"/>

    <copyField source="module_default_name" dest="module_default_name_sort"/>
    <copyField source="module_default_name" dest="module_default_name_search"/>

    <field name="equipment_id" type="int" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="equipment_name" dest="equipment_name_sort"/>
    <copyField source="equipment_name" dest="equipment_name_search"/>

    <field name="equipment_number" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_number_sort" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_number_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="equipment_number" dest="equipment_number_sort"/>
    <copyField source="equipment_number" dest="equipment_number_search"/>

    <field name="equipment_mes_name" type="text_general" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_mes_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_mes_name_search" type="string_ci" indexed="true" stored="true"
           omitNorms="true"/>

    <copyField source="equipment_mes_name" dest="equipment_mes_name_sort"/>
    <copyField source="equipment_mes_name" dest="equipment_mes_name_search"/>

    <field name="equipment_default_name" type="text_general" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_default_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_default_name_search" type="string_ci" indexed="true" stored="true"
           omitNorms="true"/>

    <copyField source="equipment_default_name" dest="equipment_default_name_sort"/>
    <copyField source="equipment_default_name" dest="equipment_default_name_search"/>

    <field name="equipment_serial_number" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_serial_number_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_serial_number_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <copyField source="equipment_serial_number" dest="equipment_serial_number_sort"/>
    <copyField source="equipment_serial_number" dest="equipment_serial_number_search"/>

    <field name="equipment_vendor" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_vendor_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="equipment_vendor_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <copyField source="equipment_vendor" dest="equipment_vendor_sort"/>
    <copyField source="equipment_vendor" dest="equipment_vendor_search"/>

    <field name="facility_id" type="int" indexed="true" stored="true" omitNorms="true"/>
    <field name="facility_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="facility_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="facility_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="facility_name" dest="facility_name_sort"/>
    <copyField source="facility_name" dest="facility_name_search"/>

    <field name="facility_label" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="facility_label_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="facility_label_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <field name="area_id" type="int" indexed="true" stored="true" omitNorms="true"/>
    <field name="area_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="area_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="area_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="area_name" dest="area_name_sort"/>
    <copyField source="area_name" dest="area_name_search"/>

    <field name="area_label" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="area_label_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="area_label_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="area_label" dest="area_label_sort"/>
    <copyField source="area_label" dest="area_label_search"/>

    <field name="room_id" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="room_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="room_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="room_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="room_name" dest="room_name_sort"/>
    <copyField source="room_name" dest="room_name_search"/>

    <field name="room_code" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="room_code_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="room_code_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="room_code" dest="room_code_sort"/>
    <copyField source="room_code" dest="room_code_search"/>

    <field name="room_description" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="room_description_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="room_description" dest="room_description_search"/>

    <field name="building_id" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="building_code" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="building_code_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="building_code_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="building_code" dest="building_code_sort"/>
    <copyField source="building_code" dest="building_code_search"/>

    <field name="building_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="building_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="building_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="building_name" dest="building_name_sort"/>
    <copyField source="building_name" dest="building_name_search"/>

    <field name="zone_id" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="zone_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="zone_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="zone_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="zone_name" dest="zone_name_sort"/>
    <copyField source="zone_name" dest="zone_name_search"/>

    <field name="zone_group_id" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="zone_group_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="zone_group_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="zone_group_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="zone_group_name" dest="zone_group_name_sort"/>
    <copyField source="zone_group_name" dest="zone_group_name_search"/>

    <field name="site_id" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="site_code" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="site_code_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="site_code_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="site_code" dest="site_code_sort"/>
    <copyField source="site_code" dest="site_name_search"/>

    <field name="site_name" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="site_name_sort" type="string_ci" indexed="true" stored="true" omitNorms="true"/>
    <field name="site_name_search" type="string_ci" indexed="true" stored="true" omitNorms="true"/>

    <copyField source="site_name" dest="site_name_sort"/>
    <copyField source="site_name" dest="site_name_search"/>

    <field name="category_id" type="int" indexed="true" stored="true" omitNorms="true" multiValued="true"/>
    <field name="category" type="string" indexed="true" stored="true" omitNorms="true" multiValued="true"/>
    <field name="category_search" type="string_ci" indexed="true" stored="true" omitNorms="true" multiValued="true"/>

    <copyField source="category" dest="category_search"/>

    <field name="type_id" type="int" indexed="true" stored="true" omitNorms="true" multiValued="true"/>
    <field name="type" type="string" indexed="true" stored="true" omitNorms="true" multiValued="true"/>
    <field name="type_search" type="string_ci" indexed="true" stored="true" omitNorms="true" multiValued="true"/>

    <copyField source="type" dest="type_search"/>


    <field name="date_created" type="date" indexed="true" stored="true" omitNorms="true"/>
    <field name="last_update" type="date" indexed="true" stored="true" omitNorms="true"/>

    <!-- catchall field, containing all other searchable text fields (implemented
        via copyField further on in this schema  -->
    <field name="text" type="text_general" indexed="true" stored="false" multiValued="true"/>

    <!-- catchall text field that indexes tokens both normally and in reverse for efficient
        leading wildcard queries. -->
    <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>

    <dynamicField name="*_i" type="int" indexed="true" stored="true"/>
    <dynamicField name="*_is" type="int" indexed="true" stored="true" multiValued="true"/>
    <dynamicField name="*_s" type="string" indexed="true" stored="true"/>
    <dynamicField name="*_ss" type="string" indexed="true" stored="true" multiValued="true"/>
    <dynamicField name="*_l" type="long" indexed="true" stored="true"/>
    <dynamicField name="*_ls" type="long" indexed="true" stored="true" multiValued="true"/>
    <dynamicField name="*_t" type="text_general" indexed="true" stored="true"/>
    <dynamicField name="*_txt" type="text_general" indexed="true" stored="true" multiValued="true"/>
    <dynamicField name="*_en" type="text_en" indexed="true" stored="true" multiValued="true"/>
    <dynamicField name="*_b" type="boolean" indexed="true" stored="true"/>
    <dynamicField name="*_bs" type="boolean" indexed="true" stored="true" multiValued="true"/>
    <dynamicField name="*_f" type="float" indexed="true" stored="true"/>
    <dynamicField name="*_fs" type="float" indexed="true" stored="true" multiValued="true"/>
    <dynamicField name="*_d" type="double" indexed="true" stored="true"/>
    <dynamicField name="*_ds" type="double" indexed="true" stored="true" multiValued="true"/>

    <!-- Type used to index the lat and lon components for the "location" FieldType -->
    <dynamicField name="*_coordinate" type="tdouble" indexed="true" stored="false"/>

    <dynamicField name="*_dt" type="date" indexed="true" stored="true"/>
    <dynamicField name="*_dts" type="date" indexed="true" stored="true" multiValued="true"/>


    <!-- some trie-coded dynamic fields for faster range queries -->
    <dynamicField name="*_ti" type="tint" indexed="true" stored="true"/>
    <dynamicField name="*_tl" type="tlong" indexed="true" stored="true"/>
    <dynamicField name="*_tf" type="tfloat" indexed="true" stored="true"/>
    <dynamicField name="*_td" type="tdouble" indexed="true" stored="true"/>
    <dynamicField name="*_tdt" type="tdate" indexed="true" stored="true"/>

    <dynamicField name="*_c" type="currency" indexed="true" stored="true"/>

    <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
    <dynamicField name="attr_*" type="text_general" indexed="true" stored="true" multiValued="true"/>

    <dynamicField name="random_*" type="random"/>

    <uniqueKey>id</uniqueKey>

    <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day

         Consult the TrieDateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>


    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldType name="binary" class="solr.BinaryField"/>

    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true"/>

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element.
         Example:
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <fieldType name="string_ci" class="solr.TextField"
               sortMissingLast="true" omitNorms="true">
        <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        </analyzer>
    </fieldType>

    <fieldType name="string_ci" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.LowerCaseTokenizerFactory"/>
            <filter class="solr.EdgeNGramFilterFactory" minGramSize="2" maxGramSize="15"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.LowerCaseTokenizerFactory"/>
        </analyzer>
    </fieldType>

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
     removes stop words from case-insensitive "stopwords.txt"
     (empty by default), and down cases.  At query time only, it
     also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
            <!-- Case insensitive stop word removal.
        -->
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
            />
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.EnglishPossessiveFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
    -->
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
            />
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.EnglishPossessiveFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
    -->
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English, plus
     aggressive word-splitting and autophrase features enabled.
     This field is just like text_en, except it adds
     WordDelimiterFilter to enable splitting and matching of
     words on case-change, alpha numeric boundaries, and
     non-alphanumeric chars.  This means certain compound word
     cases will work, for example query "wi fi" will match
     document "WiFi" or "wi-fi".
        -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100"
               autoGeneratePhraseQueries="true">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
            <!-- Case insensitive stop word removal.
        -->
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
            />
            <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                    catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
            />
            <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                    catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100"
               autoGeneratePhraseQueries="true">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0"
                    catenateWords="1" catenateNumbers="1" catenateAll="0"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.EnglishMinimalStemFilterFactory"/>
            <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- Just like text_general except it reverses the characters of
     each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
                    maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
        <analyzer>
            <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
            <filter class="solr.LowerCaseFilterFactory"/>
            <!-- The TrimFilter removes any leading or trailing whitespace -->
            <filter class="solr.TrimFilterFactory"/>
            <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string,
             which may include back references to portions of the original
             string matched by the pattern.

             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.

             http://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html
          -->
            <filter class="solr.PatternReplaceFilterFactory"
                    pattern="([^a-z])" replacement="" replace="all"
            />
        </analyzer>
    </fieldType>

    <fieldType name="phonetic" stored="false" indexed="true" class="solr.TextField">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
        </analyzer>
    </fieldType>

    <fieldType name="payloads" stored="false" indexed="true" class="solr.TextField">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!--
        The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
        a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
        Attributes of the DelimitedPayloadTokenFilterFactory :
         "delimiter" - a one character delimiter. Default is | (pipe)
     "encoder" - how to encode the following value into a playload
        float -> org.apache.lucene.analysis.payloads.FloatEncoder,
        integer -> o.a.l.a.p.IntegerEncoder
        identity -> o.a.l.a.p.IdentityEncoder
            Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
         -->
            <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
        </analyzer>
    </fieldType>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!--
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
    -->
    <fieldType name="descendent_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
        </analyzer>
    </fieldType>
    <!--
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
    <fieldType name="ancestor_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
        </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField"/>

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>




    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
    <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
               geo="true" distErrPct="0.025" maxDistErr="0.001" distanceUnits="kilometers"/>

    <!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType
        Parameters:
          defaultCurrency: Specifies the default currency if none specified. Defaults to "USD"
          precisionStep:   Specifies the precisionStep for the TrieLong field used for the amount
          providerClass:   Lets you plug in other exchange provider backend:
                           solr.FileExchangeRateProvider is the default and takes one parameter:
                             currencyConfig: name of an xml file holding exchange rates
                           solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org:
                             ratesFileLocation: URL or path to rates JSON file (default latest.json on the web)
                             refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60)
   -->
    <fieldType name="currency" class="solr.CurrencyField" precisionStep="8" defaultCurrency="USD"
               currencyConfig="currency.xml"/>


    <!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but
       the default is fine for most applications.
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
    -->
    <!--
     <similarity class="com.example.solr.CustomSimilarityFactory">
       <str name="paramkey">param value</str>
     </similarity>
    -->

</schema>
